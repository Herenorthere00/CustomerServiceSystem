package customerservice.gui;

import customerservice.feedback.*;
import customerservice.supportticket.*;
import customerservice.livechat.*;

import io.grpc.stub.StreamObserver;
public class GuiController extends javax.swing.JFrame {

    /**
     * Creates new form GuiController
     */
    public GuiController() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        MessageArea = new javax.swing.JTextArea();
        TicketButton = new javax.swing.JButton();
        ChatButton = new javax.swing.JButton();
        FeedbackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MessageArea.setColumns(20);
        MessageArea.setRows(5);
        jScrollPane1.setViewportView(MessageArea);

        TicketButton.setText("Create Ticket");
        TicketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TicketButtonActionPerformed(evt);
            }
        });

        ChatButton.setText("Start Chat");
        ChatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChatButtonActionPerformed(evt);
            }
        });

        FeedbackButton.setText("Send Feedback");
        FeedbackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeedbackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TicketButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ChatButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(FeedbackButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TicketButton)
                    .addComponent(ChatButton)
                    .addComponent(FeedbackButton))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void TicketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TicketButtonActionPerformed

        try {
            TicketRequest request = TicketRequest.newBuilder()
                    .setCustomerId("user123")
                    .setIssue("Issue reported from GUI.")
                    .build();

            TicketResponse response = ticketStub.createTicket(request);
            MessageArea.append("Ticket Created: " + response.getTicketId() + ", Status: " + response.getStatus() + "\n");
        } catch (Exception ex) {
            MessageArea.append("Error creating ticket: " + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_TicketButtonActionPerformed

    private void ChatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChatButtonActionPerformed

        try {
            StreamObserver<ChatRequest> requestObserver = chatStub.chatStream(new StreamObserver<ChatResponse>() {
                @Override
                public void onNext(ChatResponse value) {
                    MessageArea.append("Agent [" + value.getAgentId() + "]: " + value.getResponse() + "\n");
                }

                @Override
                public void onError(Throwable t) {
                    MessageArea.append("Chat Error: " + t.getMessage() + "\n");
                }

                @Override
                public void onCompleted() {
                    MessageArea.append("Chat ended.\n");
                }
            });

            ChatRequest request = ChatRequest.newBuilder()
                    .setUserId("user123")
                    .setMessage("Hello from GUI Chat!")
                    .build();

            requestObserver.onNext(request);
            requestObserver.onCompleted();

        } catch (Exception ex) {
            MessageArea.append("Error starting chat: " + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_ChatButtonActionPerformed

    private void FeedbackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeedbackButtonActionPerformed

         StreamObserver<FeedbackRequest> requestObserver = feedbackStub.submitFeedback(new StreamObserver<FeedbackResponse>() {
            @Override
            public void onNext(FeedbackResponse response) {
                MessageArea.append("Feedback Response: " + response.getMessage() + "\n");
            }

            @Override
            public void onError(Throwable t) {
                MessageArea.append("Feedback Error: " + t.getMessage() + "\n");
            }

            @Override
            public void onCompleted() {
                MessageArea.append("Feedback submission completed.\n");
            }
        });

        // Send a simple feedback
        FeedbackRequest request = FeedbackRequest.newBuilder()
                .setCustomerId("user123")
                .setFeedbackText("This is feedback from GUI!")
                .build();
        requestObserver.onNext(request);

        // Important: complete the request stream
        requestObserver.onCompleted();
    }//GEN-LAST:event_FeedbackButtonActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiController().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChatButton;
    private javax.swing.JButton FeedbackButton;
    private javax.swing.JTextArea MessageArea;
    private javax.swing.JButton TicketButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
